import XCTest
@testable import Ristretto255

final class ElementTest: XCTestCase {
    func testRoundtripIdentity() {
        let identityBytes = [UInt8](repeating: 0, count: 32)
        XCTAssertEqual(identityBytes, Element(from: identityBytes)!.encoded())
        XCTAssertEqual(identityBytes, Element().encoded())
    }
    
    func testRoundtripGenerator() {
        let generatorBytes: [UInt8] = [
            0xe2, 0xf2, 0xae, 0x0a, 0x6a, 0xbc, 0x4e, 0x71,
            0xa8, 0x84, 0xa9, 0x61, 0xc5, 0x00, 0x51, 0x5f,
            0x58, 0xe3, 0x0b, 0x6a, 0xa5, 0x82, 0xdd, 0x8d,
            0xb6, 0xa6, 0x59, 0x45, 0xe0, 0x8d, 0x2d, 0x76
        ]
        let decodedGenerator = Element(from: generatorBytes)!
        XCTAssertEqual(Element.generator, decodedGenerator)
        XCTAssertEqual(generatorBytes, decodedGenerator.encoded())
        XCTAssertEqual(generatorBytes, Element.generator.encoded())
    }
    
    func testEncodingsOfBasepointMultiples() {
        let encodings: [[UInt8]] = [
            [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            [0xe2, 0xf2, 0xae, 0x0a, 0x6a, 0xbc, 0x4e, 0x71, 0xa8, 0x84, 0xa9, 0x61, 0xc5, 0x00, 0x51, 0x5f,
             0x58, 0xe3, 0x0b, 0x6a, 0xa5, 0x82, 0xdd, 0x8d, 0xb6, 0xa6, 0x59, 0x45, 0xe0, 0x8d, 0x2d, 0x76],
            [0x6a, 0x49, 0x32, 0x10, 0xf7, 0x49, 0x9c, 0xd1, 0x7f, 0xec, 0xb5, 0x10, 0xae, 0x0c, 0xea, 0x23,
             0xa1, 0x10, 0xe8, 0xd5, 0xb9, 0x01, 0xf8, 0xac, 0xad, 0xd3, 0x09, 0x5c, 0x73, 0xa3, 0xb9, 0x19],
            [0x94, 0x74, 0x1f, 0x5d, 0x5d, 0x52, 0x75, 0x5e, 0xce, 0x4f, 0x23, 0xf0, 0x44, 0xee, 0x27, 0xd5,
             0xd1, 0xea, 0x1e, 0x2b, 0xd1, 0x96, 0xb4, 0x62, 0x16, 0x6b, 0x16, 0x15, 0x2a, 0x9d, 0x02, 0x59],
            [0xda, 0x80, 0x86, 0x27, 0x73, 0x35, 0x8b, 0x46, 0x6f, 0xfa, 0xdf, 0xe0, 0xb3, 0x29, 0x3a, 0xb3,
             0xd9, 0xfd, 0x53, 0xc5, 0xea, 0x6c, 0x95, 0x53, 0x58, 0xf5, 0x68, 0x32, 0x2d, 0xaf, 0x6a, 0x57],
            [0xe8, 0x82, 0xb1, 0x31, 0x01, 0x6b, 0x52, 0xc1, 0xd3, 0x33, 0x70, 0x80, 0x18, 0x7c, 0xf7, 0x68,
             0x42, 0x3e, 0xfc, 0xcb, 0xb5, 0x17, 0xbb, 0x49, 0x5a, 0xb8, 0x12, 0xc4, 0x16, 0x0f, 0xf4, 0x4e],
            [0xf6, 0x47, 0x46, 0xd3, 0xc9, 0x2b, 0x13, 0x05, 0x0e, 0xd8, 0xd8, 0x02, 0x36, 0xa7, 0xf0, 0x00,
             0x7c, 0x3b, 0x3f, 0x96, 0x2f, 0x5b, 0xa7, 0x93, 0xd1, 0x9a, 0x60, 0x1e, 0xbb, 0x1d, 0xf4, 0x03],
            [0x44, 0xf5, 0x35, 0x20, 0x92, 0x6e, 0xc8, 0x1f, 0xbd, 0x5a, 0x38, 0x78, 0x45, 0xbe, 0xb7, 0xdf,
             0x85, 0xa9, 0x6a, 0x24, 0xec, 0xe1, 0x87, 0x38, 0xbd, 0xcf, 0xa6, 0xa7, 0x82, 0x2a, 0x17, 0x6d],
            [0x90, 0x32, 0x93, 0xd8, 0xf2, 0x28, 0x7e, 0xbe, 0x10, 0xe2, 0x37, 0x4d, 0xc1, 0xa5, 0x3e, 0x0b,
             0xc8, 0x87, 0xe5, 0x92, 0x69, 0x9f, 0x02, 0xd0, 0x77, 0xd5, 0x26, 0x3c, 0xdd, 0x55, 0x60, 0x1c],
            [0x02, 0x62, 0x2a, 0xce, 0x8f, 0x73, 0x03, 0xa3, 0x1c, 0xaf, 0xc6, 0x3f, 0x8f, 0xc4, 0x8f, 0xdc,
             0x16, 0xe1, 0xc8, 0xc8, 0xd2, 0x34, 0xb2, 0xf0, 0xd6, 0x68, 0x52, 0x82, 0xa9, 0x07, 0x60, 0x31],
            [0x20, 0x70, 0x6f, 0xd7, 0x88, 0xb2, 0x72, 0x0a, 0x1e, 0xd2, 0xa5, 0xda, 0xd4, 0x95, 0x2b, 0x01,
             0xf4, 0x13, 0xbc, 0xf0, 0xe7, 0x56, 0x4d, 0xe8, 0xcd, 0xc8, 0x16, 0x68, 0x9e, 0x2d, 0xb9, 0x5f],
            [0xbc, 0xe8, 0x3f, 0x8b, 0xa5, 0xdd, 0x2f, 0xa5, 0x72, 0x86, 0x4c, 0x24, 0xba, 0x18, 0x10, 0xf9,
             0x52, 0x2b, 0xc6, 0x00, 0x4a, 0xfe, 0x95, 0x87, 0x7a, 0xc7, 0x32, 0x41, 0xca, 0xfd, 0xab, 0x42],
            [0xe4, 0x54, 0x9e, 0xe1, 0x6b, 0x9a, 0xa0, 0x30, 0x99, 0xca, 0x20, 0x8c, 0x67, 0xad, 0xaf, 0xca,
             0xfa, 0x4c, 0x3f, 0x3e, 0x4e, 0x53, 0x03, 0xde, 0x60, 0x26, 0xe3, 0xca, 0x8f, 0xf8, 0x44, 0x60],
            [0xaa, 0x52, 0xe0, 0x00, 0xdf, 0x2e, 0x16, 0xf5, 0x5f, 0xb1, 0x03, 0x2f, 0xc3, 0x3b, 0xc4, 0x27,
             0x42, 0xda, 0xd6, 0xbd, 0x5a, 0x8f, 0xc0, 0xbe, 0x01, 0x67, 0x43, 0x6c, 0x59, 0x48, 0x50, 0x1f],
            [0x46, 0x37, 0x6b, 0x80, 0xf4, 0x09, 0xb2, 0x9d, 0xc2, 0xb5, 0xf6, 0xf0, 0xc5, 0x25, 0x91, 0x99,
             0x08, 0x96, 0xe5, 0x71, 0x6f, 0x41, 0x47, 0x7c, 0xd3, 0x00, 0x85, 0xab, 0x7f, 0x10, 0x30, 0x1e],
            [0xe0, 0xc4, 0x18, 0xf7, 0xc8, 0xd9, 0xc4, 0xcd, 0xd7, 0x39, 0x5b, 0x93, 0xea, 0x12, 0x4f, 0x3a,
             0xd9, 0x90, 0x21, 0xbb, 0x68, 0x1d, 0xfc, 0x33, 0x02, 0xa9, 0xd9, 0x9a, 0x2e, 0x53, 0xe6, 0x4e]
        ]
        var sum = Element()
        for bytes in encodings {
            XCTAssertEqual(bytes, sum.encoded())
            sum = sum + Element.generator
        }
    }
    
    func testRoundtripRandomElement() {
        for _ in 0..<256 {
            XCTAssertNoThrow(Element.random().encoded()) // TODO: Doesn't throw yet.
        }
    }
    
    func testScalarMultiplication() {
        let scalar = Scalar(129, 0, 0, 0, 0)
        let sum = (0..<129).reduce(Element(), { (p, _) in p + Element.generator })
        XCTAssertEqual(scalar * Element.generator, sum)
        XCTAssertEqual(Element(generatorTimes: scalar), sum)
        XCTAssertEqual(Element(generatorTimes: scalar), scalar * Element.generator)
        
        for _ in 0..<16 {
            let s = Scalar.random()
            XCTAssertEqual(Element(generatorTimes: s), s * Element.generator)
        }
    }
    
    func testKeyExchange() {
        let secretAlice = Scalar.random()
        let publicAlice = Element(generatorTimes: secretAlice)
        
        let secretBob = Scalar.random()
        let publicBob = Element(generatorTimes: secretBob)
        
        XCTAssertEqual(secretAlice * publicBob, secretBob * publicAlice)
    }
    
    func testSchnorr() {
        let secretStatic = Scalar.random()
        let publicStatic = Element(generatorTimes: secretStatic)
        
        let secretEphemeral = Scalar.random()
        let publicEphemeral = Element(generatorTimes: secretEphemeral)
        
        var rng = SystemRandomNumberGenerator()
        let c = Scalar(fromUniformBytes: (0..<64).map { _ in rng.next() })
        let t = secretEphemeral + c * secretStatic
        
        let lhs = Element(generatorTimes: t)
        let rhs = c * publicStatic + publicEphemeral
        
        XCTAssertEqual(lhs, rhs)
    }
}
